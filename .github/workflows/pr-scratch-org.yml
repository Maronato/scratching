name: Create scratch org for PR
on:
  pull_request:
    types: [opened, reopened, synchronize, closed]
    # branches:
    #   - "scratch-alpha/**"

permissions:
  # Allow creating comments
  pull-requests: write

jobs:
  delete:
    name: Delete PR scratch org
    if: ${{ github.event.action == 'opened' || github.event.action == 'reopened' || github.event.action == 'closed' }}
    runs-on: ubuntu-latest
    steps:
      ############## Setup ##############
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Get PR number
        uses: actions/github-script@v6
        id: get_issue_number
        with:
          script: |
            if (context.issue.number) {
              // Return issue number if present
              return context.issue.number;
            } else {
              // Otherwise return issue number from commit
              return (
                await github.rest.repos.listPullRequestsAssociatedWithCommit({
                  commit_sha: context.sha,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                })
              ).data[0].number;
            }
          result-encoding: string
      - name: Get scratch org username
        id: get_org_username
        run: echo "username=pull-request-${{ steps.get_issue_number.outputs.result }}@scratch-ci.com" >> "$GITHUB_OUTPUT"

      - name: Install sfdx
        run: npm install @salesforce/cli@2.9.8 --global

      - name: Authenticate
        env:
          SF_CONSUMER_KEY: ${{ secrets.SF_CONSUMER_KEY }}
          SF_JWT_SECRET_KEY: ${{ secrets.SF_JWT_SECRET_KEY }}
        run: |
          echo "${SF_JWT_SECRET_KEY}" > server.key
          sf org login jwt --alias=scratch --username=${{ steps.get_org_username.outputs.username }} --jwt-key-file server.key --client-id=${SF_CONSUMER_KEY} --set-default-dev-hub --set-default

      - name: print
        run: echo -E $(sf org list --json | jq)

      ############## Delete ##############

      - name: Delete existing PR scratch org
        run: sf org delete scratch --no-prompt || true

  create:
    name: Create PR scratch org
    if: ${{ (success() && github.event.action != 'closed') || github.event.action == 'opened' || github.event.action == 'reopened' }}
    needs: delete
    runs-on: ubuntu-latest
    steps:
      ############## Setup ##############
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Get PR number
        uses: actions/github-script@v6
        id: get_issue_number
        with:
          script: |
            if (context.issue.number) {
              // Return issue number if present
              return context.issue.number;
            } else {
              // Otherwise return issue number from commit
              return (
                await github.rest.repos.listPullRequestsAssociatedWithCommit({
                  commit_sha: context.sha,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                })
              ).data[0].number;
            }
          result-encoding: string
      - name: Get scratch org username
        id: get_org_username
        run: echo "username=pull-request-${{ steps.get_issue_number.outputs.result }}@scratch-ci.com" >> "$GITHUB_OUTPUT"

      - name: Install sfdx
        run: npm install @salesforce/cli@2.9.8 --global

      - name: Authenticate
        env:
          SF_CONSUMER_KEY: ${{ secrets.SF_CONSUMER_KEY }}
          SF_JWT_SECRET_KEY: ${{ secrets.SF_JWT_SECRET_KEY }}
          SF_DEVHUB_USERNAME: ${{ secrets.SF_DEVHUB_USERNAME }}
        run: |
          echo "${SF_JWT_SECRET_KEY}" > server.key
          sf org login jwt --alias=devhub --username=${SF_DEVHUB_USERNAME} --jwt-key-file server.key --client-id=${SF_CONSUMER_KEY} --set-default-dev-hub --set-default

      - name: print
        run: echo -E $(sf org list --json | jq)

      ############## Create ##############

      - name: Create scratch org
        run: |
          # Attempt to create the scratch org and save the output
          data="$(sf org create scratch --json --edition=developer --username=${{ steps.get_org_username.outputs.username }} --set-default --alias=scratch --duration-days=14 || true)"
          # If the status code is not 0, the command failed
          if [ "$(echo $data | jq .status)" != "0" ]; then
            echo "Failed to create scratch org. See the response below for more details."
            echo -E "$(echo $data | jq)"
            exit 1
          fi
          echo -E "$(echo $data | jq))"

      - name: Deploy source
        continue-on-error: true
        run: sf project deploy start

      - name: Get login info
        id: get_login_info
        run: |
          data="$(sf org open --json --url-only)"
          echo username=$(echo $data | jq -r .result.username) >> "$GITHUB_OUTPUT"
          echo url=$(echo $data | jq -r .result.url) >> "$GITHUB_OUTPUT"
          echo id=$(echo $data | jq -r .result.orgId) >> "$GITHUB_OUTPUT"
          echo -E "$(echo $data | jq)"

      - name: Comment login url
        uses: actions/github-script@v6
        env:
          ORG_USERNAME: ${{ steps.get_login_info.outputs.username }}}
          ORG_URL: ${{ steps.get_login_info.outputs.url }}}
          ORG_ID: ${{ steps.get_login_info.outputs.id }}}
        with:
          script: |
            const { ORG_USERNAME, ORG_URL, ORG_ID } = process.env
            console.log({ ORG_USERNAME, ORG_URL, ORG_ID })

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### üöÄ **Scratch org created!**
               - Org ID: ${ORG_ID}
               - Username: ${ORG_USERNAME}
               - Link: ${ORG_URL}
              
              **Instructions**
               - Use it perform tests and QA
               - Pushes to this PR will be deployed automatically
               - It'll be deleted automatically after 14 days or when the PR is closed`
            })

  deploy:
    name: Deploy to PR scratch org
    if: ${{ (success() && (github.event.action == 'opened' || github.event.action == 'reopened')) || github.event.action == 'synchronize' }}
    needs: create
    runs-on: ubuntu-latest
    steps:
      ############## Setup ##############
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Get PR number
        uses: actions/github-script@v6
        id: get_issue_number
        with:
          script: |
            if (context.issue.number) {
              // Return issue number if present
              return context.issue.number;
            } else {
              // Otherwise return issue number from commit
              return (
                await github.rest.repos.listPullRequestsAssociatedWithCommit({
                  commit_sha: context.sha,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                })
              ).data[0].number;
            }
          result-encoding: string
      - name: Get scratch org username
        id: get_org_username
        run: echo "username=pull-request-${{ steps.get_issue_number.outputs.result }}@scratch-ci.com" >> "$GITHUB_OUTPUT"

      - name: Install sfdx
        run: npm install @salesforce/cli@2.9.8 --global

      - name: Authenticate
        env:
          SF_CONSUMER_KEY: ${{ secrets.SF_CONSUMER_KEY }}
          SF_JWT_SECRET_KEY: ${{ secrets.SF_JWT_SECRET_KEY }}
        run: |
          echo "${SF_JWT_SECRET_KEY}" > server.key
          sf org login jwt --alias=scratch --username=${{ steps.get_org_username.outputs.username }} --jwt-key-file server.key --client-id=${SF_CONSUMER_KEY} --set-default-dev-hub --set-default

      - name: print
        run: echo -E $(sf org list --json | jq)

      ############## Deploy ##############

      - name: Deploy source
        run: sf project deploy start --dry-run

      - name: Comment deployment
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚òÅÔ∏è Deployed commit ${github.event.pull_request.head.sha}!'
            })
